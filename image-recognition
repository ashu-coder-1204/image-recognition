{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMZFNEefpOgeJa6gpsVC+gL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ashu-coder-1204/image-recognition/blob/main/image-recognition\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install kaggle"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "krUcVtYlYE--",
        "outputId": "3c9fd833-2e88-4db1-fe47-cbbba026257e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.7.4.5)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: certifi>=14.05.14 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2025.8.3)\n",
            "Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.4.2)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from kaggle) (3.10)\n",
            "Requirement already satisfied: protobuf in /usr/local/lib/python3.11/dist-packages (from kaggle) (5.29.5)\n",
            "Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.9.0.post0)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: setuptools>=21.0.0 in /usr/local/lib/python3.11/dist-packages (from kaggle) (75.2.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: text-unidecode in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: urllib3>=1.15.1 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.5.0)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from kaggle) (0.5.1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "dmqBZmgNWvJh",
        "outputId": "4ec54988-b009-4e8f-cd4f-8f8bebd11812"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-037e747b-2baa-4107-911a-09917d2a1f59\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-037e747b-2baa-4107-911a-09917d2a1f59\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle.json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle.json': b'{\"username\":\"ash12wini04\",\"key\":\"6279737467d836f532419da0bfec4584\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "from google.colab import files\n",
        "files.upload()  # Upload kaggle.json here\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p ~/.kaggle\n",
        "!mv kaggle.json ~/.kaggle/\n",
        "\n"
      ],
      "metadata": {
        "id": "Yl8wJblSXoBV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "metadata": {
        "id": "-MEgdgxnXqdg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets list\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_7c5RyHnfk6e",
        "outputId": "fef00768-3145-4a1d-e5b9-b69a31d2fd40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ref                                                             title                                                     size  lastUpdated                 downloadCount  voteCount  usabilityRating  \n",
            "--------------------------------------------------------------  --------------------------------------------------  ----------  --------------------------  -------------  ---------  ---------------  \n",
            "rohitgrewal/airlines-flights-data                               Airlines Flights Data                                  2440299  2025-07-29 09:16:00.463000          11741        231  1.0              \n",
            "wasiqaliyasir/breast-cancer-dataset                             Breast cancer dataset                                    49830  2025-07-30 12:52:44.057000           7058        244  1.0              \n",
            "kunshbhatia/delhi-air-quality-dataset                           Delhi Air Quality Dataset                                30430  2025-07-28 14:00:14.247000           4898        106  1.0              \n",
            "abdulmalik1518/cars-datasets-2025                               Cars Datasets (2025)                                     25987  2025-07-17 21:43:28.493000          11558        253  1.0              \n",
            "rohitgrewal/restaurant-sales-data                               Restaurant Sales Data                                     2237  2025-07-31 17:29:16.597000           2287         38  1.0              \n",
            "pratyushpuri/retail-fashion-boutique-data-sales-analytics-2025  Retail Fashion Boutique Data Sales Analytics 2025       301873  2025-08-07 16:10:36.233000            781         22  1.0              \n",
            "pratyushpuri/grocery-store-sales-dataset-in-2025-1900-record    Grocery Store Sales Dataset in 2025 - 1900+ Record      232437  2025-08-07 07:06:10.343000            520         26  1.0              \n",
            "willianoliveiragibin/gold-price-2025                            Gold_price_2025                                          27061  2025-07-27 19:47:22.870000           1085         25  1.0              \n",
            "rohitgrewal/netflix-data                                        Netflix Data                                           1224095  2025-07-31 06:07:40.333000           2118         39  1.0              \n",
            "mdsultanulislamovi/student-stress-monitoring-datasets           Student Stress Monitoring Datasets                       24336  2025-07-24 16:30:01.617000           1065         18  1.0              \n",
            "sahilislam007/college-student-placement-factors-dataset         College Student Placement Factors Dataset               110450  2025-07-02 08:33:50.547000          12131        231  1.0              \n",
            "rohitgrewal/spotify-youtube-data                                Spotify-YouTube Data                                   9386470  2025-07-26 08:56:33.277000           1365         32  1.0              \n",
            "anandshaw2001/top-spotify-songs-in-countries                    Top Spotify Listening History Songs in Countries       6389288  2025-06-15 05:01:56                  7542        179  1.0              \n",
            "younusmohamed/payment-fraud-empowering-financial-security       Payment Fraud - Empowering Financial Security           319948  2025-08-02 08:40:49.427000            635         28  1.0              \n",
            "kshitijsaini121/stock-market-prediction-for-july-2025-dataset   Stock Market Dataset for August 2025                    183209  2025-08-07 14:48:39.003000            669         16  1.0              \n",
            "rohitgrewal/weather-data                                        Weather Data                                            102960  2025-07-30 15:25:37.393000            874         28  1.0              \n",
            "ankushpanday2/indian-kids-screentime-2025                       Indian Kids Screentime 2025                              70001  2025-07-08 17:25:35.483000           6727        110  1.0              \n",
            "shamimhasan8/education-inequality-data                          Education Inequality Data                                28283  2025-07-29 03:19:04.740000           1329         27  1.0              \n",
            "nayakganesh007/snitch-clothing-sales                            Snitch Clothing  Sales                                   62616  2025-07-23 07:01:49.137000           1073         21  0.8235294        \n",
            "yasserhessein/multiclass-diabetes-dataset                       Multiclass Diabetes Dataset                               3755  2025-07-18 09:17:03.757000           1760         48  1.0              \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import kagglehub\n",
        "\n",
        "# Download latest version\n",
        "path = kagglehub.dataset_download(\"hojjatk/mnist-dataset\")\n",
        "\n",
        "print(\"Path to dataset files:\", path)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OBWqSefgfrkF",
        "outputId": "55228235-ae84-4f0e-a7ae-7a4f6ae366df"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Path to dataset files: /kaggle/input/mnist-dataset\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# Load dataset\n",
        "(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()\n",
        "\n",
        "print(\"Train shape:\", x_train.shape)\n",
        "print(\"Test shape:\", x_test.shape)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8UF50AOqgQ2w",
        "outputId": "ce544315-8623-4b5e-ff18-7f3dd3717104"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "Train shape: (60000, 28, 28)\n",
            "Test shape: (10000, 28, 28)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Normalize pixel values to range [0, 1]\n",
        "x_train = x_train.astype('float32') / 255.0\n",
        "x_test  = x_test.astype('float32') / 255.0\n",
        "\n",
        "# Reshape images to (number, height, width, channels)\n",
        "# If grayscale (e.g., MNIST: 28x28), add channel dimension\n",
        "x_train = x_train.reshape(-1, 28, 28, 1)\n",
        "x_test  = x_test.reshape(-1, 28, 28, 1)\n",
        "\n",
        "print(\"x_train shape:\", x_train.shape)\n",
        "print(\"x_test shape:\", x_test.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JTpFTDJJhhXd",
        "outputId": "d01f0504-93f2-4b98-8b16-f1cd25bf3850"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train shape: (60000, 28, 28, 1)\n",
            "x_test shape: (10000, 28, 28, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.figure(figsize=(8, 8))\n",
        "for i in range(16):\n",
        "    plt.subplot(4, 4, i + 1)\n",
        "    plt.imshow(x_train[i].reshape(28, 28), cmap='gray')  # reshaped for display\n",
        "    plt.axis('off')\n",
        "    plt.title(f\"Label: {y_train[i]}\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 806
        },
        "id": "3QIw4njbjXZu",
        "outputId": "39c830a2-4817-405e-bed5-2d4a51e668fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# Load CIFAR-10 dataset\n",
        "(X_train_c10, y_train_c10), (X_test_c10, y_test_c10) = tf.keras.datasets.cifar10.load_data()\n",
        "\n",
        "# Normalize pixel values\n",
        "X_train_c10 = X_train_c10 / 255.0\n",
        "X_test_c10 = X_test_c10 / 255.0\n",
        "\n",
        "print(f\"CIFAR-10 train shape: {X_train_c10.shape}\")\n",
        "print(f\"CIFAR-10 test shape: {X_test_c10.shape}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qdvdm7FQp8y9",
        "outputId": "c9094fca-325b-40d1-c6f5-516923f06250"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n",
            "\u001b[1m170498071/170498071\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 0us/step\n",
            "CIFAR-10 train shape: (50000, 32, 32, 3)\n",
            "CIFAR-10 test shape: (10000, 32, 32, 3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n",
        "    MaxPooling2D(2,2),\n",
        "    Conv2D(64, (3,3), activation='relu'),\n",
        "    MaxPooling2D(2,2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "jgVqWRnlqBWW",
        "outputId": "a306a282-eee6-49e5-9c30-fcfdb1727fd6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/convolutional/base_conv.py:113: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m26\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m13\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m11\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1600\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m204,928\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">13</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">11</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1600</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">204,928</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m225,034\u001b[0m (879.04 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">225,034</span> (879.04 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3,3), activation='relu', input_shape=(32, 32, 3)),\n",
        "    MaxPooling2D((2,2)),\n",
        "    Flatten(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n"
      ],
      "metadata": {
        "id": "y4subtBlrBrD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1. Load CIFAR-10 dataset\n",
        "(X_train, y_train), (X_test, y_test) = tf.keras.datasets.cifar10.load_data()\n",
        "\n",
        "# 2. Normalize data\n",
        "X_train = X_train / 255.0\n",
        "X_test = X_test / 255.0\n",
        "\n",
        "# 3. Build model\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3,3), activation='relu', input_shape=(32, 32, 3)),\n",
        "    MaxPooling2D((2,2)),\n",
        "    Flatten(),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "\n",
        "# 4. Compile model\n",
        "model.compile(\n",
        "    optimizer='adam',\n",
        "    loss='sparse_categorical_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")\n",
        "\n",
        "# 5. Train model (this creates 'history')\n",
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    epochs=5,\n",
        "    batch_size=32,\n",
        "    validation_split=0.2\n",
        ")\n",
        "\n",
        "# 6. Plot accuracy\n",
        "plt.plot(history.history['accuracy'], label='Train')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 464
        },
        "id": "Dtao21olrYwE",
        "outputId": "d4b28414-402b-46bc-b129-8138eeb6f3b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 29ms/step - accuracy: 0.3562 - loss: 1.7878 - val_accuracy: 0.5140 - val_loss: 1.3922\n",
            "Epoch 2/5\n",
            "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m39s\u001b[0m 28ms/step - accuracy: 0.5608 - loss: 1.2509 - val_accuracy: 0.5747 - val_loss: 1.2059\n",
            "Epoch 3/5\n",
            "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m45s\u001b[0m 31ms/step - accuracy: 0.6064 - loss: 1.1197 - val_accuracy: 0.5936 - val_loss: 1.1615\n",
            "Epoch 4/5\n",
            "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 29ms/step - accuracy: 0.6347 - loss: 1.0454 - val_accuracy: 0.6198 - val_loss: 1.1052\n",
            "Epoch 5/5\n",
            "\u001b[1m1250/1250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m33s\u001b[0m 26ms/step - accuracy: 0.6623 - loss: 0.9707 - val_accuracy: 0.6224 - val_loss: 1.0987\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_loss,test_acc=model.evaluate(X_test,y_test)\n",
        "print(\"Test Accuracy:{test_acc:.4f}\")\n",
        "y_pred=model.predict(X_test).argmax(axis=1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aORQWDfttH_M",
        "outputId": "3a291d89-082c-49cf-83b1-77a21dd58534"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 8ms/step - accuracy: 0.6210 - loss: 1.0812\n",
            "Test Accuracy:{test_acc:.4f}\n",
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 8ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import Dropout\n",
        "\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),\n",
        "    MaxPooling2D(2,2),\n",
        "    Dropout(0.25),\n",
        "    Conv2D(64, (3,3), activation='relu'),\n",
        "    MaxPooling2D(2,2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "rXOGpSvrtPXH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "datagen= ImageDataGenerator(\n",
        "    rotation_range=15,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    horizontal_flip=True\n",
        ")\n",
        "datagen.fit(X_train_c10)"
      ],
      "metadata": {
        "id": "M-5iepCqtmCV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.layers import BatchNormalization\n",
        "model = Sequential([\n",
        "    Conv2D(32, (3,3), activation='relu', input_shape=(32,32,3)),\n",
        "    BatchNormalization(),\n",
        "    MaxPooling2D(2,2),\n",
        "    Conv2D(64, (3,3), activation='relu'),\n",
        "    MaxPooling2D(2,2),\n",
        "    Conv2D(128, (3,3), activation='relu'),\n",
        "    MaxPooling2D(2,2),\n",
        "    Flatten(),\n",
        "    Dense(256, activation='relu'),\n",
        "    Dropout(0.5),\n",
        "    Dense(10, activation='softmax')\n",
        "])\n",
        "model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n",
        "model.fit(datagen.flow(X_train_c10,y_train_c10,batch_size=32),epochs=10,validation_data=(X_test_c10,y_test_c10))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "APP-WZYhtrSF",
        "outputId": "c350c10e-9296-478f-c5ab-9d8e23ea658e"
      },
      "execution_count": null,
      "outputs": [
        {
          "metadata": {
            "tags": null
          },
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "metadata": {
            "tags": null
          },
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m132s\u001b[0m 83ms/step - accuracy: 0.3434 - loss: 1.7874 - val_accuracy: 0.5128 - val_loss: 1.3795\n",
            "Epoch 2/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m124s\u001b[0m 80ms/step - accuracy: 0.5347 - loss: 1.3064 - val_accuracy: 0.6210 - val_loss: 1.0729\n",
            "Epoch 3/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m130s\u001b[0m 83ms/step - accuracy: 0.5887 - loss: 1.1742 - val_accuracy: 0.6015 - val_loss: 1.1291\n",
            "Epoch 4/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m128s\u001b[0m 82ms/step - accuracy: 0.6208 - loss: 1.0733 - val_accuracy: 0.5555 - val_loss: 1.2827\n",
            "Epoch 5/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m129s\u001b[0m 82ms/step - accuracy: 0.6365 - loss: 1.0460 - val_accuracy: 0.5862 - val_loss: 1.2179\n",
            "Epoch 6/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m131s\u001b[0m 84ms/step - accuracy: 0.6548 - loss: 0.9933 - val_accuracy: 0.6770 - val_loss: 0.9299\n",
            "Epoch 7/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m127s\u001b[0m 81ms/step - accuracy: 0.6682 - loss: 0.9620 - val_accuracy: 0.6742 - val_loss: 0.9652\n",
            "Epoch 8/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m130s\u001b[0m 83ms/step - accuracy: 0.6786 - loss: 0.9346 - val_accuracy: 0.6812 - val_loss: 0.9406\n",
            "Epoch 9/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m127s\u001b[0m 81ms/step - accuracy: 0.6865 - loss: 0.9030 - val_accuracy: 0.7143 - val_loss: 0.8252\n",
            "Epoch 10/10\n",
            "\u001b[1m1563/1563\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m142s\u001b[0m 81ms/step - accuracy: 0.6862 - loss: 0.9018 - val_accuracy: 0.7063 - val_loss: 0.8673\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7e176c475990>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix,classification_report\n",
        "import numpy as np\n",
        "\n",
        "y_pred_c10=model.predict(X_test_c10).argmax(axis=1)\n",
        "cm=confusion_matrix(y_test_c10,y_pred_c10)\n",
        "print(classification_report(y_test_c10,y_pred_c10))\n",
        "\n",
        "import seaborn as sns\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.heatmap(cm,annot=True,fmt='d')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 791
        },
        "id": "lzHQ9wSqyxtC",
        "outputId": "45448a75-8718-43ab-b15d-10fb85343d34"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 20ms/step\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.76      0.76      0.76      1000\n",
            "           1       0.83      0.82      0.82      1000\n",
            "           2       0.79      0.43      0.56      1000\n",
            "           3       0.60      0.51      0.55      1000\n",
            "           4       0.73      0.61      0.67      1000\n",
            "           5       0.69      0.61      0.65      1000\n",
            "           6       0.66      0.88      0.76      1000\n",
            "           7       0.69      0.79      0.74      1000\n",
            "           8       0.91      0.71      0.80      1000\n",
            "           9       0.57      0.94      0.71      1000\n",
            "\n",
            "    accuracy                           0.71     10000\n",
            "   macro avg       0.72      0.71      0.70     10000\n",
            "weighted avg       0.72      0.71      0.70     10000\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(close=None, block=None)>"
            ],
            "text/html": [
              "<div style=\"max-width:800px; border: 1px solid var(--colab-border-color);\"><style>\n",
              "      pre.function-repr-contents {\n",
              "        overflow-x: auto;\n",
              "        padding: 8px 12px;\n",
              "        max-height: 500px;\n",
              "      }\n",
              "\n",
              "      pre.function-repr-contents.function-repr-contents-collapsed {\n",
              "        cursor: pointer;\n",
              "        max-height: 100px;\n",
              "      }\n",
              "    </style>\n",
              "    <pre style=\"white-space: initial; background:\n",
              "         var(--colab-secondary-surface-color); padding: 8px 12px;\n",
              "         border-bottom: 1px solid var(--colab-border-color);\"><b>matplotlib.pyplot.show</b><br/>def show(*args, **kwargs) -&gt; None</pre><pre class=\"function-repr-contents function-repr-contents-collapsed\" style=\"\"><a class=\"filepath\" style=\"display:none\" href=\"#\">/usr/local/lib/python3.11/dist-packages/matplotlib/pyplot.py</a>Display all open figures.\n",
              "\n",
              "Parameters\n",
              "----------\n",
              "block : bool, optional\n",
              "    Whether to wait for all figures to be closed before returning.\n",
              "\n",
              "    If `True` block and run the GUI main loop until all figure windows\n",
              "    are closed.\n",
              "\n",
              "    If `False` ensure that all figure windows are displayed and return\n",
              "    immediately.  In this case, you are responsible for ensuring\n",
              "    that the event loop is running to have responsive figures.\n",
              "\n",
              "    Defaults to True in non-interactive mode and to False in interactive\n",
              "    mode (see `.pyplot.isinteractive`).\n",
              "\n",
              "See Also\n",
              "--------\n",
              "ion : Enable interactive mode, which shows / updates the figure after\n",
              "      every plotting command, so that calling ``show()`` is not necessary.\n",
              "ioff : Disable interactive mode.\n",
              "savefig : Save the figure to an image file instead of showing it on screen.\n",
              "\n",
              "Notes\n",
              "-----\n",
              "**Saving figures to file and showing a window at the same time**\n",
              "\n",
              "If you want an image file as well as a user interface window, use\n",
              "`.pyplot.savefig` before `.pyplot.show`. At the end of (a blocking)\n",
              "``show()`` the figure is closed and thus unregistered from pyplot. Calling\n",
              "`.pyplot.savefig` afterwards would save a new and thus empty figure. This\n",
              "limitation of command order does not apply if the show is non-blocking or\n",
              "if you keep a reference to the figure and use `.Figure.savefig`.\n",
              "\n",
              "**Auto-show in jupyter notebooks**\n",
              "\n",
              "The jupyter backends (activated via ``%matplotlib inline``,\n",
              "``%matplotlib notebook``, or ``%matplotlib widget``), call ``show()`` at\n",
              "the end of every cell by default. Thus, you usually don&#x27;t have to call it\n",
              "explicitly there.</pre>\n",
              "      <script>\n",
              "      if (google.colab.kernel.accessAllowed && google.colab.files && google.colab.files.view) {\n",
              "        for (const element of document.querySelectorAll('.filepath')) {\n",
              "          element.style.display = 'block'\n",
              "          element.onclick = (event) => {\n",
              "            event.preventDefault();\n",
              "            event.stopPropagation();\n",
              "            google.colab.files.view(element.textContent, 569);\n",
              "          };\n",
              "        }\n",
              "      }\n",
              "      for (const element of document.querySelectorAll('.function-repr-contents')) {\n",
              "        element.onclick = (event) => {\n",
              "          event.preventDefault();\n",
              "          event.stopPropagation();\n",
              "          element.classList.toggle('function-repr-contents-collapsed');\n",
              "        };\n",
              "      }\n",
              "      </script>\n",
              "      </div>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.upload()  # Upload kaggle.json here\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 90
        },
        "id": "PDnI5_pD05aX",
        "outputId": "a1a4533d-5730-4034-ccc6-32f26a5c06de"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-915e9c78-f33a-497b-8273-864dc6609797\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-915e9c78-f33a-497b-8273-864dc6609797\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving kaggle.json to kaggle (1).json\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'kaggle (1).json': b'{\"username\":\"ash12wini04\",\"key\":\"4f791da8fa936ce4f1cf2df6158509cb\"}'}"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!mkdir -p ~/.kaggle\n",
        "!mv kaggle.json ~/.kaggle/\n",
        "\n"
      ],
      "metadata": {
        "id": "UJVdkSSA2EDQ"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "metadata": {
        "id": "0YSPZt8G2Ihy"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!kaggle datasets download -d tongpython/cat-and-dog"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4mneTcyC2LO3",
        "outputId": "9b2bd827-e4a2-48db-9b24-3137e377141d"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/tongpython/cat-and-dog\n",
            "License(s): CC0-1.0\n",
            "Downloading cat-and-dog.zip to /content\n",
            " 53% 116M/218M [00:00<00:00, 1.21GB/s]\n",
            "100% 218M/218M [00:00<00:00, 665MB/s] \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import zipfile\n",
        "with zipfile.ZipFile('/content/cat-and-dog.zip','r')as zip_ref:\n",
        "  zip_ref.extractall('/content/dogs-vs-cats')"
      ],
      "metadata": {
        "id": "wAyVUrfA2PWo"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)\n",
        "train_generator = datagen.flow_from_directory(\n",
        "    '/content/dogs-vs-cats',\n",
        "    target_size=(224,224),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    subset='training'\n",
        ")\n",
        "val_generator = datagen.flow_from_directory(\n",
        "    '/content/dogs-vs-cats',\n",
        "    target_size=(224,224),\n",
        "    batch_size=32,\n",
        "    class_mode='binary',\n",
        "    subset='validation'\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0JERxIWW2YMg",
        "outputId": "ad80ceec-9dff-4d6c-f640-5bc01b2e3a72"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 8023 images belonging to 2 classes.\n",
            "Found 2005 images belonging to 2 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.applications import MobileNetV2\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import GlobalAveragePooling2D, Dense\n",
        "\n",
        "base_model=MobileNetV2(weights='imagenet',include_top=False,input_shape=(224,224,3))\n",
        "base_model.trainable=False\n",
        "\n",
        "model=Sequential([base_model,GlobalAveragePooling2D(),Dense(128,activation='relu'),Dense(1,activation='sigmoid')])\n",
        "model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy'])\n",
        "model.fit(train_generator,epochs=5,validation_data=val_generator)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmhFqf362cgX",
        "outputId": "c092a374-ed5b-48d7-c03a-520f61e6fa5d"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
            "\u001b[1m9406464/9406464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m429s\u001b[0m 2s/step - accuracy: 0.7854 - loss: 0.5573 - val_accuracy: 0.7985 - val_loss: 0.5210\n",
            "Epoch 2/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m411s\u001b[0m 2s/step - accuracy: 0.8030 - loss: 0.4878 - val_accuracy: 0.7985 - val_loss: 0.5121\n",
            "Epoch 3/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m420s\u001b[0m 2s/step - accuracy: 0.8087 - loss: 0.4679 - val_accuracy: 0.7985 - val_loss: 0.5190\n",
            "Epoch 4/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m424s\u001b[0m 2s/step - accuracy: 0.8043 - loss: 0.4614 - val_accuracy: 0.7985 - val_loss: 0.5307\n",
            "Epoch 5/5\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m408s\u001b[0m 2s/step - accuracy: 0.8118 - loss: 0.4316 - val_accuracy: 0.7985 - val_loss: 0.6457\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7b4d45ef3910>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "\n",
        "# Example setup:\n",
        "base_model = tf.keras.applications.MobileNetV2(input_shape=(224, 224, 3),\n",
        "                                               include_top=False,\n",
        "                                               weights='imagenet')\n",
        "base_model.trainable = True\n",
        "\n",
        "# Add custom layers on top of base_model if you haven't already:\n",
        "model = tf.keras.Sequential([\n",
        "    base_model,\n",
        "    tf.keras.layers.GlobalAveragePooling2D(),\n",
        "    tf.keras.layers.Dense(1, activation='sigmoid')  # binary classification example\n",
        "])\n",
        "\n",
        "model.compile(optimizer=tf.keras.optimizers.Adam(1e-5),\n",
        "              loss='binary_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "model.fit(train_generator, epochs=3, validation_data=val_generator)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X8-65Q5u7-BA",
        "outputId": "cc6b688c-de08-4238-a67f-bcddb11c72b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1776s\u001b[0m 7s/step - accuracy: 0.6132 - loss: 0.6604 - val_accuracy: 0.2658 - val_loss: 1.0676\n",
            "Epoch 2/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1740s\u001b[0m 7s/step - accuracy: 0.8003 - loss: 0.4928 - val_accuracy: 0.4628 - val_loss: 0.7690\n",
            "Epoch 3/3\n",
            "\u001b[1m251/251\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 7s/step - accuracy: 0.8013 - loss: 0.4662"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('mobilenet_cats_dogs.h5')\n",
        "#To load\n",
        "import tensorflow as tf\n",
        "loaded_model=tf.keras.models.load_model('mobilenet_cats_dogs.h5')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Oib3VmVxQdZN",
        "outputId": "f7c854bb-9712-4117-eb46-43c3fb06bebc"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n",
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "\n",
        "y_pred_proba = loaded_model.predict(val_generator)\n",
        "fpr, tpr, _ = roc_curve(val_generator.classes, y_pred_proba)\n",
        "roc_auc = auc(fpr, tpr)\n",
        "plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')\n",
        "plt.plot([0, 1], [0, 1], 'k--')\n",
        "plt.xlabel('False Positive Rate')\n",
        "plt.ylabel('True Positive Rate')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "J_5RGAVkQjR8",
        "outputId": "f417eb7a-7f15-472f-bfdb-6062195f0810"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m63/63\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m79s\u001b[0m 1s/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()  # Upload e.g. 'mycat.jpg'\n",
        "\n",
        "from tensorflow.keras.preprocessing import image\n",
        "from tensorflow.keras.applications.mobilenet_v2 import preprocess_input\n",
        "import numpy as np\n",
        "\n",
        "img_path = 'dog.jpg'  # Replace with your filename\n",
        "img = image.load_img(img_path, target_size=(224, 224))\n",
        "img_array = image.img_to_array(img)\n",
        "img_array = np.expand_dims(img_array, axis=0)\n",
        "img_array = preprocess_input(img_array)\n",
        "\n",
        "prediction = loaded_model.predict(img_array)\n",
        "print(\"Predicted class:\", \"Dog\" if prediction[0][0] > 0.5 else \"Cat\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        },
        "id": "8lKItgEfdLzi",
        "outputId": "bd6910a8-2ed5-484b-ba07-0ea5bc5a8624"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-fea56c60-c721-496a-82e6-01a1d5043c7d\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-fea56c60-c721-496a-82e6-01a1d5043c7d\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving dog.jpg to dog (1).jpg\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n",
            "Predicted class: Dog\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "datasets = ['MNIST', 'CIFAR-10', 'Cats vs. Dogs']\n",
        "accuracies = [0.98, 0.75, 0.84]\n",
        "plt.bar(datasets, accuracies, color=['#36A2EB', '#FF6384', '#4BC0C0'])\n",
        "plt.title('Model Accuracies Across Datasets')\n",
        "plt.xlabel('Dataset')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.ylim(0,1)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "zXpsQWfYdNAD",
        "outputId": "55e31a9f-7d59-49b9-e559-5c3a148819fa"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}